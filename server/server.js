"use strict";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:true});var Log=class{static{__name(this,"Log")}constructor(url,token,defaultLabels={Language:"NodeJS",source:"Code"},flushTimeoutMs=2e3){this.url=url;this.token=token||"";this.defaultLabels=defaultLabels;this.enabled=this.url!=="";this.logBuffer=new Map;this.flushInterval=null;this.flushTimeoutMs=flushTimeoutMs;if(!this.enabled){console.warn("Logger initialized without proper URL. Logging to Grafana Loki is disabled.")}else{console.log("Logger initialized.");this.startFlushInterval()}}startFlushInterval(){if(this.flushInterval===null){this.flushInterval=setInterval(()=>{this.flushLogs()},this.flushTimeoutMs)}}stopFlushInterval(){if(this.flushInterval!==null){clearInterval(this.flushInterval);this.flushInterval=null}}getTimestampNs(){return(Math.floor(Date.now()/1e3)*1e9).toString()}stringifyMessage(message){return typeof message==="string"?message:JSON.stringify(message)}getLabelsKey(labels){return JSON.stringify(labels)}bufferLog(message,labels){const key=this.getLabelsKey(labels);if(!this.logBuffer.has(key)){this.logBuffer.set(key,{stream:labels,values:[]})}const stream=this.logBuffer.get(key);stream.values.push([this.getTimestampNs(),message])}async flushLogs(){if(!this.enabled||this.logBuffer.size===0){return}try{const payload={streams:Array.from(this.logBuffer.values())};const headers={"Content-Type":"application/json"};if(this.token&&this.token.trim()!==""){headers["Authorization"]=`Bearer ${this.token}`}const response=await fetch(this.url,{method:"POST",headers,body:JSON.stringify(payload)});if(!response.ok){throw new Error(`HTTP error ${response.status}: ${await response.text()}`)}this.logBuffer.clear()}catch(error){console.error("Failed to send aggregated logs to Loki:",error)}}async log(message,additionalLabels={}){if(!this.enabled){console.warn("Logger is disabled. Skipping log message:",message);return}const labels={...this.defaultLabels,...additionalLabels};const stringMessage=this.stringifyMessage(message);this.bufferLog(stringMessage,labels)}async info(message,additionalLabels={}){return this.log(message,{...additionalLabels,level:"info"})}async warn(message,additionalLabels={}){return this.log(message,{...additionalLabels,level:"warn"})}async error(message,additionalLabels={}){return this.log(message,{...additionalLabels,level:"error"})}async debug(message,additionalLabels={}){return this.log(message,{...additionalLabels,level:"debug"})}async flush(){return this.flushLogs()}};var log=new Log(GetConvar("kifflom:log:grafana_url",""),GetConvar("kifflom:log:grafana_token",""),{fivem_environment:"development",service_name:"kifflom_log"});AddEventHandler("kifflom_log:server:event:trigger",async(data,...args)=>{const{event,source,citizen_id,invoking_resource,error}=data;try{const logPayload={event_type:"event",event};if(source)logPayload.source=source;if(citizen_id)logPayload.citizen_id=citizen_id;if(invoking_resource)logPayload.invoking_resource=invoking_resource;if(error)logPayload.error=error;if(args.length>0)logPayload.args=args;const labels={event_type:"event",event};if(source)labels.source=source;if(citizen_id)labels.citizen_id=citizen_id;if(invoking_resource)labels.invoking_resource=invoking_resource;labels.isError=!!error;await log.info(logPayload,labels)}catch(err){console.error("Error logging event:",err)}});AddEventHandler("kifflom_log:server:export:call",async(data,...args)=>{const{resource,function_name,invoking_resource}=data;try{await log.info({event_type:"export",resource,function_name,invoking_resource,args},{event_type:"export",resource,function_name,invoking_resource})}catch(err){console.error("Error logging export call:",err)}});
